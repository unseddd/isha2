use crate::BLOCK_384_512_LEN as BLOCK_LEN;
use crate::PAD_AND_LENGTH_384_512_LEN as PAD_AND_LENGTH_LEN;
use crate::STATE_384_512_LEN as STATE_LEN;
use crate::WORD_384_512_LEN as WORD_LEN;
use crate::{inner_full_pad, inner_pad, process_block_384_512, zero_block};
use crate::{Error, Hash, Sha2};

/// Digest length in bytes (512-bits)
pub const DIGEST_LEN: usize = 64;

// Initial state words: FIPS-180-2 sections 5.3.4
const INITIAL_STATE: [u64; STATE_LEN] = [
    0x6a09e667f3bcc908,
    0xbb67ae8584caa73b,
    0x3c6ef372fe94f82b,
    0xa54ff53a5f1d36f1,
    0x510e527fade682d1,
    0x9b05688c2b3e6c1f,
    0x1f83d9abfb41bd6b,
    0x5be0cd19137e2179,
];

/// Implementation of the SHA-256 transform
pub struct Sha384 {
    state: [u64; STATE_LEN],
    block: [u8; BLOCK_LEN],
    index: usize,
    bit_index: usize,
    total_len: u128,
    hash: Hash,
}

impl Sha2 for Sha384 {
    type Block = [u8; BLOCK_LEN];
    type Digest = [u8; DIGEST_LEN];
    type State = [u64; STATE_LEN];

    /// Create a newly initialized SHA-256 transform
    fn new() -> Self {
        Self {
            state: INITIAL_STATE,
            block: [0_u8; BLOCK_LEN],
            index: 0,
            bit_index: 0,
            total_len: 0,
            hash: Hash::Sha384,
        }
    }

    fn encode_state(&self) -> Self::Digest {
        let mut res = [0_u8; DIGEST_LEN];

        for (i, word) in self.state.iter().enumerate() {
            res[i * WORD_LEN..(i + 1) * WORD_LEN].copy_from_slice(word.to_be_bytes().as_ref());
        }

        res
    }

    fn process_block(&mut self) {
        process_block_384_512(&mut self.state, &mut self.block, &mut self.index);
    }

    fn pad(&mut self) -> Result<(), Error> {
        inner_pad(
            &mut self.block,
            self.index,
            self.bit_index,
            self.total_len as u128,
            &self.hash,
        )
    }

    fn full_pad(&mut self) {
        inner_full_pad(&mut self.block, self.total_len, &self.hash);
    }

    fn index(&self) -> usize {
        self.index
    }

    fn increment_index(&mut self) {
        self.index += 1;
    }

    fn bit_index(&self) -> usize {
        self.bit_index
    }

    fn set_bit_index(&mut self, index: usize) {
        self.bit_index = index;
    }

    fn total_len(&self) -> u128 {
        self.total_len as u128
    }

    fn increment_total_len(&mut self, len: usize) -> Result<(), Error> {
        let len = len as u128;

        if len + self.total_len > u128::MAX {
            return Err(Error::InvalidLength);
        }

        // increase the total length of the message
        self.total_len += len;

        Ok(())
    }

    fn hash(&self) -> &Hash {
        &self.hash
    }

    fn initial_state(&mut self) {
        self.state.copy_from_slice(INITIAL_STATE.as_ref());
    }

    fn block_mut(&mut self) -> &mut [u8] {
        &mut self.block
    }

    fn zero_block(&mut self) {
        zero_block(&mut self.block);
    }

    fn reset_counters(&mut self) {
        self.index = 0;
        self.bit_index = 0;
        self.total_len = 0;
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn rfc_vector1() {
        let input = b"abc";
        let expected = [
            0xdd, 0xaf, 0x35, 0xa1, 0x93, 0x61, 0x7a, 0xba, 0xcc, 0x41, 0x73, 0x49, 0xae, 0x20,
            0x41, 0x31, 0x12, 0xe6, 0xfa, 0x4e, 0x89, 0xa9, 0x7e, 0xa2, 0x0a, 0x9e, 0xee, 0xe6,
            0x4b, 0x55, 0xd3, 0x9a, 0x21, 0x92, 0x99, 0x2a, 0x27, 0x4f, 0xc1, 0xa8, 0x36, 0xba,
            0x3c, 0x23, 0xa3, 0xfe, 0xeb, 0xbd, 0x45, 0x4d, 0x44, 0x23, 0x64, 0x3c, 0xe8, 0x0e,
            0x2a, 0x9a, 0xc9, 0x4f, 0xa5, 0x4c, 0xa4, 0x9f,
        ];

        let mut sha = Sha384::new();

        sha.input(input.as_ref()).unwrap();

        let digest = sha.finalize().unwrap();

        assert_eq!(digest, expected);
    }

    #[test]
    fn rfc_vector2() {
        let input = b"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";
        let expected = [
            0x8e, 0x95, 0x9b, 0x75, 0xda, 0xe3, 0x13, 0xda, 0x8c, 0xf4, 0xf7, 0x28, 0x14, 0xfc,
            0x14, 0x3f, 0x8f, 0x77, 0x79, 0xc6, 0xeb, 0x9f, 0x7f, 0xa1, 0x72, 0x99, 0xae, 0xad,
            0xb6, 0x88, 0x90, 0x18, 0x50, 0x1d, 0x28, 0x9e, 0x49, 0x00, 0xf7, 0xe4, 0x33, 0x1b,
            0x99, 0xde, 0xc4, 0xb5, 0x43, 0x3a, 0xc7, 0xd3, 0x29, 0xee, 0xb6, 0xdd, 0x26, 0x54,
            0x5e, 0x96, 0xe5, 0x5b, 0x87, 0x4b, 0xe9, 0x09,
        ];

        let mut sha = Sha384::new();

        sha.input(input.as_ref()).unwrap();

        let digest = sha.finalize().unwrap();

        assert_eq!(digest, expected);
    }

    #[test]
    fn rfc_vector3() {
        let input = b"a";
        let expected = [
            0xe7, 0x18, 0x48, 0x3d, 0x0c, 0xe7, 0x69, 0x64, 0x4e, 0x2e, 0x42, 0xc7, 0xbc, 0x15,
            0xb4, 0x63, 0x8e, 0x1f, 0x98, 0xb1, 0x3b, 0x20, 0x44, 0x28, 0x56, 0x32, 0xa8, 0x03,
            0xaf, 0xa9, 0x73, 0xeb, 0xde, 0x0f, 0xf2, 0x44, 0x87, 0x7e, 0xa6, 0x0a, 0x4c, 0xb0,
            0x43, 0x2c, 0xe5, 0x77, 0xc3, 0x1b, 0xeb, 0x00, 0x9c, 0x5c, 0x2c, 0x49, 0xaa, 0x2e,
            0x4e, 0xad, 0xb2, 0x17, 0xad, 0x8c, 0xc0, 0x9b,
        ];

        let mut sha = Sha384::new();

        for _i in 0..1_000_000 {
            sha.input(input.as_ref()).unwrap();
        }

        let digest = sha.finalize().unwrap();

        assert_eq!(digest, expected);
    }

    #[test]
    fn rfc_vector4() {
        let input = b"0123456701234567012345670123456701234567012345670123456701234567";
        let expected = [
            0x89, 0xd0, 0x5b, 0xa6, 0x32, 0xc6, 0x99, 0xc3, 0x12, 0x31, 0xde, 0xd4, 0xff, 0xc1,
            0x27, 0xd5, 0xa8, 0x94, 0xda, 0xd4, 0x12, 0xc0, 0xe0, 0x24, 0xdb, 0x87, 0x2d, 0x1a,
            0xbd, 0x2b, 0xa8, 0x14, 0x1a, 0x0f, 0x85, 0x07, 0x2a, 0x9b, 0xe1, 0xe2, 0xaa, 0x04,
            0xcf, 0x33, 0xc7, 0x65, 0xcb, 0x51, 0x08, 0x13, 0xa3, 0x9c, 0xd5, 0xa8, 0x4c, 0x4a,
            0xca, 0xa6, 0x4d, 0x3f, 0x3f, 0xb7, 0xba, 0xe9,
        ];

        let mut sha = Sha384::new();

        for _i in 0..10 {
            sha.input(input.as_ref()).unwrap();
        }

        let digest = sha.finalize().unwrap();

        assert_eq!(digest, expected);
    }

    // FIXME: skip vector 5, 7, and 9 since the `final_bits` API is unimplemented
    #[test]
    fn rfc_vector5() {
        let input = [];
        let expected = [
            0xd4, 0xee, 0x29, 0xa9, 0xe9, 0x09, 0x85, 0x44, 0x6b, 0x91, 0x3c, 0xf1, 0xd1, 0x37,
            0x6c, 0x83, 0x6f, 0x4b, 0xe2, 0xc1, 0xcf, 0x3c, 0xad, 0xa0, 0x72, 0x0a, 0x6b, 0xf4,
            0x85, 0x7d, 0x88, 0x6a, 0x7e, 0xcb, 0x3c, 0x4e, 0x4c, 0x0f, 0xa8, 0xc7, 0xf9, 0x52,
            0x14, 0xe4, 0x1d, 0xc1, 0xb0, 0xd2, 0x1b, 0x22, 0xa8, 0x4c, 0xc0, 0x3b, 0xf8, 0xce,
            0x48, 0x45, 0xf3, 0x4d, 0xd5, 0xbd, 0xba, 0xd4,
        ];

        let mut sha = Sha384::new();
        sha.input(input.as_ref()).unwrap();
        let digest = sha.final_bits(0xb0, 5).unwrap();

        assert_eq!(digest, expected);
    }

    #[test]
    fn rfc_vector6() {
        let input = b"\xd0";
        let expected = [
            0x99, 0x92, 0x20, 0x29, 0x38, 0xe8, 0x82, 0xe7, 0x3e, 0x20, 0xf6, 0xb6, 0x9e, 0x68,
            0xa0, 0xa7, 0x14, 0x90, 0x90, 0x42, 0x3d, 0x93, 0xc8, 0x1b, 0xab, 0x3f, 0x21, 0x67,
            0x8d, 0x4a, 0xce, 0xee, 0xe5, 0x0e, 0x4e, 0x8c, 0xaf, 0xad, 0xa4, 0xc8, 0x5a, 0x54,
            0xea, 0x83, 0x06, 0x82, 0x6c, 0x4a, 0xd6, 0xe7, 0x4c, 0xec, 0xe9, 0x63, 0x1b, 0xfa,
            0x8a, 0x54, 0x9b, 0x4a, 0xb3, 0xfb, 0xba, 0x15,
        ];

        let mut sha = Sha384::new();

        sha.input(input.as_ref()).unwrap();

        let digest = sha.finalize().unwrap();

        assert_eq!(digest, expected);
    }

    #[test]
    fn rfc_vector7() {
        let input = b"\x08\xec\xb5\x2e\xba\xe1\xf7\x42\x2d\xb6\x2b\xcd\x54\x26\x70";
        let expected = [
            0xed, 0x8d, 0xc7, 0x8e, 0x8b, 0x01, 0xb6, 0x97, 0x50, 0x05, 0x3d, 0xbb, 0x7a, 0x0a,
            0x9e, 0xda, 0x0f, 0xb9, 0xe9, 0xd2, 0x92, 0xb1, 0xed, 0x71, 0x5e, 0x80, 0xa7, 0xfe,
            0x29, 0x0a, 0x4e, 0x16, 0x66, 0x4f, 0xd9, 0x13, 0xe8, 0x58, 0x54, 0x40, 0x0c, 0x5a,
            0xf0, 0x5e, 0x6d, 0xad, 0x31, 0x6b, 0x73, 0x59, 0xb4, 0x3e, 0x64, 0xf8, 0xbe, 0xc3,
            0xc1, 0xf2, 0x37, 0x11, 0x99, 0x86, 0xbb, 0xb6,
        ];

        let mut sha = Sha384::new();

        sha.input(input.as_ref()).unwrap();

        let digest = sha.final_bits(0x80, 3).unwrap();

        assert_eq!(digest, expected);
    }

    #[test]
    fn rfc_vector8() {
        let input = b"\x8d\x4e\x3c\x0e\x38\x89\x19\x14\x91\x81\x6e\x9d\x98\xbf\xf0\xa0";
        let expected = [
            0xcb, 0x0b, 0x67, 0xa4, 0xb8, 0x71, 0x2c, 0xd7, 0x3c, 0x9a, 0xab, 0xc0, 0xb1, 0x99,
            0xe9, 0x26, 0x9b, 0x20, 0x84, 0x4a, 0xfb, 0x75, 0xac, 0xbd, 0xd1, 0xc1, 0x53, 0xc9,
            0x82, 0x89, 0x24, 0xc3, 0xdd, 0xed, 0xaa, 0xfe, 0x66, 0x9c, 0x5f, 0xdd, 0x0b, 0xc6,
            0x6f, 0x63, 0x0f, 0x67, 0x73, 0x98, 0x82, 0x13, 0xeb, 0x1b, 0x16, 0xf5, 0x17, 0xad,
            0x0d, 0xe4, 0xb2, 0xf0, 0xc9, 0x5c, 0x90, 0xf8,
        ];

        let mut sha = Sha384::new();

        sha.input(input.as_ref()).unwrap();

        let digest = sha.finalize().unwrap();

        assert_eq!(digest, expected);
    }

    #[test]
    fn rfc_vector9() {
        let input = [
            0x3a, 0xdd, 0xec, 0x85, 0x59, 0x32, 0x16, 0xd1, 0x61, 0x9a, 0xa0, 0x2d, 0x97, 0x56,
            0x97, 0x0b, 0xfc, 0x70, 0xac, 0xe2, 0x74, 0x4f, 0x7c, 0x6b, 0x27, 0x88, 0x15, 0x10,
            0x28, 0xf7, 0xb6, 0xa2, 0x55, 0x0f, 0xd7, 0x4a, 0x7e, 0x6e, 0x69, 0xc2, 0xc9, 0xb4,
            0x5f, 0xc4, 0x54, 0x96, 0x6d, 0xc3, 0x1d, 0x2e, 0x10, 0xda, 0x1f, 0x95, 0xce, 0x02,
            0xbe, 0xb4, 0xbf, 0x87, 0x65, 0x57, 0x4c, 0xbd, 0x6e, 0x83, 0x37, 0xef, 0x42, 0x0a,
            0xdc, 0x98, 0xc1, 0x5c, 0xb6, 0xd5, 0xe4, 0xa0, 0x24, 0x1b, 0xa0, 0x04, 0x6d, 0x25,
            0x0e, 0x51, 0x02, 0x31, 0xca, 0xc2, 0x04, 0x6c, 0x99, 0x16, 0x06, 0xab, 0x4e, 0xe4,
            0x14, 0x5b, 0xee, 0x2f, 0xf4, 0xbb, 0x12, 0x3a, 0xab, 0x49, 0x8d, 0x9d, 0x44, 0x79,
            0x4f, 0x99, 0xcc, 0xad, 0x89, 0xa9, 0xa1, 0x62, 0x12, 0x59, 0xed, 0xa7, 0x0a, 0x5b,
            0x6d, 0xd4, 0xbd, 0xd8, 0x77, 0x78, 0xc9, 0x04, 0x3b, 0x93, 0x84, 0xf5, 0x49, 0x06,
        ];
        let expected = [
            0x32, 0xba, 0x76, 0xfc, 0x30, 0xea, 0xa0, 0x20, 0x8a, 0xeb, 0x50, 0xff, 0xb5, 0xaf,
            0x18, 0x64, 0xfd, 0xbf, 0x17, 0x90, 0x2a, 0x4d, 0xc0, 0xa6, 0x82, 0xc6, 0x1f, 0xce,
            0xa6, 0xd9, 0x2b, 0x78, 0x32, 0x67, 0xb2, 0x10, 0x80, 0x30, 0x18, 0x37, 0xf5, 0x9d,
            0xe7, 0x9c, 0x6b, 0x33, 0x7d, 0xb2, 0x52, 0x6f, 0x8a, 0x0a, 0x51, 0x0e, 0x5e, 0x53,
            0xca, 0xfe, 0xd4, 0x35, 0x5f, 0xe7, 0xc2, 0xf1,
        ];

        let mut sha = Sha384::new();

        sha.input(input.as_ref()).unwrap();

        let digest = sha.final_bits(0x80, 3).unwrap();

        assert_eq!(digest, expected);
    }

    #[test]
    fn rfc_vector10() {
        let input = [
            0xa5, 0x5f, 0x20, 0xc4, 0x11, 0xaa, 0xd1, 0x32, 0x80, 0x7a, 0x50, 0x2d, 0x65, 0x82,
            0x4e, 0x31, 0xa2, 0x30, 0x54, 0x32, 0xaa, 0x3d, 0x06, 0xd3, 0xe2, 0x82, 0xa8, 0xd8,
            0x4e, 0x0d, 0xe1, 0xde, 0x69, 0x74, 0xbf, 0x49, 0x54, 0x69, 0xfc, 0x7f, 0x33, 0x8f,
            0x80, 0x54, 0xd5, 0x8c, 0x26, 0xc4, 0x93, 0x60, 0xc3, 0xe8, 0x7a, 0xf5, 0x65, 0x23,
            0xac, 0xf6, 0xd8, 0x9d, 0x03, 0xe5, 0x6f, 0xf2, 0xf8, 0x68, 0x00, 0x2b, 0xc3, 0xe4,
            0x31, 0xed, 0xc4, 0x4d, 0xf2, 0xf0, 0x22, 0x3d, 0x4b, 0xb3, 0xb2, 0x43, 0x58, 0x6e,
            0x1a, 0x7d, 0x92, 0x49, 0x36, 0x69, 0x4f, 0xcb, 0xba, 0xf8, 0x8d, 0x95, 0x19, 0xe4,
            0xeb, 0x50, 0xa6, 0x44, 0xf8, 0xe4, 0xf9, 0x5e, 0xb0, 0xea, 0x95, 0xbc, 0x44, 0x65,
            0xc8, 0x82, 0x1a, 0xac, 0xd2, 0xfe, 0x15, 0xab, 0x49, 0x81, 0x16, 0x4b, 0xbb, 0x6d,
            0xc3, 0x2f, 0x96, 0x90, 0x87, 0xa1, 0x45, 0xb0, 0xd9, 0xcc, 0x9c, 0x67, 0xc2, 0x2b,
            0x76, 0x32, 0x99, 0x41, 0x9c, 0xc4, 0x12, 0x8b, 0xe9, 0xa0, 0x77, 0xb3, 0xac, 0xe6,
            0x34, 0x06, 0x4e, 0x6d, 0x99, 0x28, 0x35, 0x13, 0xdc, 0x06, 0xe7, 0x51, 0x5d, 0x0d,
            0x73, 0x13, 0x2e, 0x9a, 0x0d, 0xc6, 0xd3, 0xb1, 0xf8, 0xb2, 0x46, 0xf1, 0xa9, 0x8a,
            0x3f, 0xc7, 0x29, 0x41, 0xb1, 0xe3, 0xbb, 0x20, 0x98, 0xe8, 0xbf, 0x16, 0xf2, 0x68,
            0xd6, 0x4f, 0x0b, 0x0f, 0x47, 0x07, 0xfe, 0x1e, 0xa1, 0xa1, 0x79, 0x1b, 0xa2, 0xf3,
            0xc0, 0xc7, 0x58, 0xe5, 0xf5, 0x51, 0x86, 0x3a, 0x96, 0xc9, 0x49, 0xad, 0x47, 0xd7,
            0xfb, 0x40, 0xd2,
        ];
        let expected = [
            0xc6, 0x65, 0xbe, 0xfb, 0x36, 0xda, 0x18, 0x9d, 0x78, 0x82, 0x2d, 0x10, 0x52, 0x8c,
            0xbf, 0x3b, 0x12, 0xb3, 0xee, 0xf7, 0x26, 0x03, 0x99, 0x09, 0xc1, 0xa1, 0x6a, 0x27,
            0x0d, 0x48, 0x71, 0x93, 0x77, 0x96, 0x6b, 0x95, 0x7a, 0x87, 0x8e, 0x72, 0x05, 0x84,
            0x77, 0x9a, 0x62, 0x82, 0x5c, 0x18, 0xda, 0x26, 0x41, 0x5e, 0x49, 0xa7, 0x17, 0x6a,
            0x89, 0x4e, 0x75, 0x10, 0xfd, 0x14, 0x51, 0xf5,
        ];

        let mut sha = Sha384::new();

        sha.input(input.as_ref()).unwrap();

        let digest = sha.finalize().unwrap();

        assert_eq!(digest, expected);
    }
}
